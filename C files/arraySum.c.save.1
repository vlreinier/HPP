/* arraySum.c uses an array to sum the values in an input file,
 *  whose name is specified on the command-line.
 * Huib Aldewereld, HU, HPP, 2020
 */

#include <stdio.h>      /* I/O stuff */
#include <stdlib.h>     /* calloc, etc. */
#include <omp.h>

void readArray(char * fileName, double ** a, int * n);
double ompSumArray(double * a, int numValues);
double sumArray(double * a, int numValues);
double arraySumRuntime(double * a, int howMany, double (*function) (double *, int));

int main(int argc, char **argv)
{
  int  howMany;
  double * a;
  
  if (argc < 2) {
    fprintf(stderr, "\n*** Usage: arraySum <inputFile> <inputFile> etc..\n\n");
    exit(1);
  }

  printf("%s", "\n");

  for (int i = 1; i < argc; i++) {
    readArray(argv[i], &a, &howMany);
    double seq = arraySumRuntime(a, howMany, sumArray);
    double omp = arraySumRuntime(a, howMany, ompSumArray);
    printf("%s\nSequential: %f\nParallel: %f\n\n", argv[i], seq, omp);
    free(a);
  }

  return 0;
}

/* readArray fills an array with values from a file.
 * Receive: fileName, a char*,
 *          a, the address of a pointer to an array,
 *          n, the address of an int.
 * PRE: fileName contains N, followed by N double values.
 * POST: a points to a dynamically allocated array
 *        containing the N values from fileName
 *        and n == N.
 */

void readArray(char * fileName, double ** a, int * n) {
  int count, howMany;
  double * tempA;
  FILE * fin;

  fin = fopen(fileName, "r");
  if (fin == NULL) {
    fprintf(stderr, "\n*** Unable to open input file '%s'\n\n",
                     fileName);
    exit(1);
  }

  fscanf(fin, "%d", &howMany);
  tempA = calloc(howMany, sizeof(double));
  if (tempA == NULL) {
    fprintf(stderr, "\n*** Unable to allocate %d-length array",
                     howMany);
    exit(1);
  }

  for (count = 0; count < howMany; count++)
   fscanf(fin, "%lf", &tempA[count]);

  fclose(fin);

  *n = howMany;
  *a = tempA;
}

double arraySumRuntime(double * a, int howMany, double (*function) (double *, int)) {
  double start = omp_get_wtime();
  function(a, howMany);
  return omp_get_wtime() - start;
}

/* sumArray sums the values in an array of doubles.
 * Receive: a, a pointer to the head of an array;
 *          numValues, the number of values in the array.
 * Return: the sum of the values in the array.
 */

double sumArray(double * a, int numValues) {
  int i;
  double result = 0.0;

  for (i = 0; i < numValues; i++) {
	result += a[i];
  }

  return result;
}

double ompSumArray(double * a, int numValues) {
  int i;
  double result = 0.0;

  #pragma omp parallel for reduction(+:result)
  for (i = 0; i < numValues; i++) {
        result += a[i];
  }

  return result;
}
